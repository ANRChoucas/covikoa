@prefix : <http://example.com/covikoa-derivation-model-shape#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix cvk-ir: <http://example.com/cvk-ir#> .
@prefix gviz: <http://lig-tdcge.imag.fr/steamer/covikoa/geoviz#> .
@prefix cvkd: <http://lig-tdcge.imag.fr/steamer/covikoa/derivation#> .
@prefix graphic: <https://gis.lu.se/ont/data_portrayal/graphic#> .
@prefix symb: <https://gis.lu.se/ont/data_portrayal/symbol#> .
@prefix symblzr: <https://gis.lu.se/ont/data_portrayal/symbolizer#> .
@prefix scale: <https://gis.lu.se/ont/visualisation_scale#> .
@prefix ion: <http://lig-tdcge.imag.fr/steamer/covikoa/interaction#> .

# This file contains shapes allowing to validate a user-written Derivation Model.
# It contains useful information about what is expected to be a well-formed Derivation Model for CoViKoa.
:
    a owl:Ontology ;
    owl:imports sh: ;
    sh:declare [
                   sh:prefix "gviz" ;
                   sh:namespace "http://lig-tdcge.imag.fr/steamer/covikoa/geoviz#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "cvkd" ;
                   sh:namespace "http://lig-tdcge.imag.fr/steamer/covikoa/derivation#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "owl" ;
                   sh:namespace "http://www.w3.org/2002/07/owl#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "symblzr" ;
                   sh:namespace "https://gis.lu.se/ont/data_portrayal/symbolizer#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "rdfs" ;
                   sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI ;
               ] .

:DerivationModelIsAnOntology
    a sh:NodeShape ;
    rdfs:comment """The Derivation Model have to be defined as a owl:Ontology"""@en ;
    sh:targetNode owl:Ontology ;
    sh:property [
                    sh:path [ sh:inversePath rdf:type ] ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "The Derivation Model have to be defined as a owl:Ontology"@en ;
                ] .

:DerivationModelDefinePrefixesIifSPARQLFilterExists
    a sh:NodeShape ;
    rdfs:comment """The Derivation Model have to be defined as a owl:Ontology and it have to declare prefix(es) to be used in the SPARQLFilter values."""@en ;
    sh:target [ a sh:SPARQLTarget ;
                sh:prefixes : ;
                sh:select """
        SELECT ?this
        WHERE {
            ?this a owl:Ontology .
            ?cf a cvkd:SPARQLFilter .
        }
        """ ] ;
    sh:property [
                    sh:path sh:declare ;
                    sh:minCount 1 ;
                    sh:message "The Derivation Model have to be defined as a owl:Ontology and it have to declare prefix(es) to be used in the SPARQLFilter values."@en ;
                ] .

:ModelGeoVisualApplicationShape # TODO: change so that subclassing gviz:GeoVisualApplication is not be mandatory (case study 4/6)
    a sh:NodeShape ;
    rdfs:comment """The Derivation Model must contain only one subclass of gviz:GeoVisualApplication."""@en ;
    sh:targetNode gviz:GeoVisualApplication ;
    sh:property [
                    sh:path [ sh:inversePath rdfs:subClassOf ] ;
                    sh:minCount 2 ;
                    sh:maxCount 2 ;
                    sh:message "The Derivation Model must contain only one class itself subclassing gviz:GeoVisualApplication"@en ;
                ] .

:GeoVisualApplicationShape
    a sh:NodeShape ;
    rdfs:comment """The Derivation Model must contain only one gviz:GeoVisualApplication"""@en ;
    sh:targetNode gviz:GeoVisualApplication ;
    sh:property [
                    sh:path [ sh:inversePath rdf:type ] ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "The Derivation Model must contain only one individual of type gviz:GeoVisualApplication"@en ;
                ] .

:GeoVisualApplicationHasComponentShape
    a sh:NodeShape ;
    rdfs:comment """The Derivation Model must have one individual of type gviz:GeoVisualApplication with the following constraints."""@en ;
    sh:targetClass gviz:GeoVisualApplication ;
    sh:property [
          sh:path gviz:represents ;
          sh:maxCount 1 ;
          sh:message "The individual of type gviz:GeoVisualApplication can only represents one specific individual of the Semantic Data Model"@en ;
      ] ;
    sh:property [
          sh:path gviz:hasGeoVisualComponent ;
          sh:message "The individual of type gviz:GeoVisualApplication should link to at least one gviz:Map2dComponent through the property gviz:hasGeoVisualComponent."@en ;
          sh:qualifiedMinCount 1 ;
          sh:qualifiedValueShape [
              sh:class gviz:Map2dComponent ;
            ] ;
      ] .

:LegendComponentShape
    a sh:NodeShape ;
    rdfs:comment """LegendComponent have to be linked to another GeoVisualComponent."""@en ;
    sh:targetClass gviz:LegendComponent ;
    sh:property [
                    sh:path gviz:linkedTo ;
                    sh:minCount 1 ;
                    sh:message "The individual of type gviz:LegendComponent should link to at least one gviz:Map2dComponent or gviz:Map3dComponent"@en ;
                ] .

:GeoVisualComponentShape
    a sh:NodeShape ;
    rdfs:comment """The Derivation Model must contain at least one gviz:Map2dComponent"""@en ;
    sh:targetNode gviz:Map2dComponent ;
    sh:property [
        sh:path [ sh:inversePath rdf:type ] ;
        sh:minCount 1 ;
        sh:message "The Derivation Model must contain at least one individual of type gviz:Map2dComponent"@en ;
    ] .

:ModelGeoVisualIntermediateRepresentationShape
    a sh:NodeShape ;
    rdfs:comment """The derivation model should define at least one class subclassing gviz:GeoVisualIntermediateRepresentation"""@en ;
    sh:targetNode gviz:GeoVisualIntermediateRepresentation ;
    sh:property [
                    sh:path [ sh:inversePath rdfs:subClassOf ] ;
                    sh:severity sh:Warning ;
                    sh:minCount 1 ;
                    sh:message "The derivation model should define at least one class subclassing gviz:GeoVisualIntermediateRepresentation."@en ;
                ] .

# Validation for the owl:class subclassing gviz:GeoVisualIntermediateRepresentation
# written to describe the concept from the SDM to be portrayed
:GeoVisualIntermediateRepresentationShape
    a sh:NodeShape ;
    sh:target :targetGVR ;
    sh:property [
                    sh:path cvkd:pathFromGVA ;
                    sh:maxCount 1 ;
                    sh:message """
                        Each class subclassing gviz:GeoVisualIntermediateRepresentation can only use 0 or 1 time the annotation property 'cvkd:pathFromGVA'.
                        Note that it expects a rdf:list of property allowing to reach the concept represented by this gviz:GeoVisualIntermediateRepresentation from
                        the concept represented by the gviz:GeoVisualApplication, in the same fashion as if it was an owl:PropertyChainAxiom.
                        """@en ;

                ] ;
    sh:property [
                    sh:path cvkd:represents ;
                    sh:minCount 1 ;
                    sh:message "Each class subclassing gviz:GeoVisualIntermediateRepresentation must use at least once the 'cvkd:represents' annotation property."@en ;
                ] .

:targetGVR
    a sh:SPARQLTarget ;
    sh:prefixes : ;
    sh:select """
        SELECT ?this
        WHERE {
            ?this a owl:Class ;
                rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation .
            FILTER(?this != owl:Nothing) .
        }
        """ .

# Validation for instances of cvkd:SPARQLFilter
:SPARQLFilterShape
    a sh:NodeShape ;
    rdfs:comment """cvkd:SPARQLFilter must have one label and one value."""@en ;
    sh:targetClass cvkd:SPARQLFilter ;
    sh:property [
                    sh:path rdfs:label ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message "Each individual of type cvkd:SPARQLFilter is expected to have a label with the property 'rdfs:label'."@en ;
                ] ;
    sh:property [
                    sh:path rdf:value ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:message """
                    Each individual of type cvkd:SPARQLFilter is expected to have a value with the property 'rdf:value'.
                    This value is expected to contain a SPARQL query, pull interesting individuals from the Semantic Data Model,
                    and binding its result to a variable named '?somethingRepresentable'.
                    """@en ;
                    sh:pattern "SELECT\\s[DISTINCT\\s]*\\?somethingRepresentable" ;
                ] .

##########################################################
# PropertyConstraint
##########################################################
:PropertyConstraintShape
    a sh:NodeShape ;
    rdfs:comment """cvkd:PropertyConstraint must use exactly one time the 'cvkd:propertyPath' property or one time the 'cvkd:propertyPathChain' property."""@en ;
    sh:targetClass cvkd:PropertyConstraint ;
    sh:deactivated true ;
    sh:or (
              [
                  sh:path cvkd:propertyPath ;
                  sh:minCount 1 ;
                  sh:maxCount 1 ;
                  sh:message "Each individual of type cvkd:PropertyConstraint is expected to define a matching property, either with `cvkd:propertyPath` or with `cvkd:propertyPathChain`."@en ;
              ]
              [
                  sh:path cvkd:propertyPathChain ;
                  sh:minCount 1 ;
                  sh:maxCount 1 ;
                  sh:message "Each individual of type cvkd:PropertyConstraint is expected to define a matching property, either with `cvkd:propertyPath` or with `cvkd:propertyPathChain`."@en ;
              ]
          ) .

# Validation for instances of gviz:Portrayal
:PortrayalShape
    a sh:NodeShape ;
    rdfs:comment "Each portrayal is expected to denotes some class defined in the Derivation Model and it expected to be associated to some portrayal rule."@en ;
    sh:targetClass gviz:Portrayal ;
    sh:property [
                    sh:path cvkd:denotesGVR ;
                    sh:minCount 1 ;
                    sh:message "Each `gviz:Portrayal` is supposed to by linked with the property `cvkd:denotesGVR` to the Intermediate Representation (defined in the Derivation Model) of a concept from the Semantic Data Model."@en ;
                ] ;
    sh:property [
                    sh:path gviz:hasPortrayalRule ;
                    sh:minCount 1 ;
                    sh:message "Each `gviz:Portrayal` is supposed to by linked with the property `gviz:hasPortrayalRule` to one or more PortrayalRule(s)."@en ;
                ] ;
    sh:property [
                    sh:path gviz:displayIndex ;
                    sh:maxCount 1 ;
                    sh:datatype xsd:integer ;
                    sh:message "Each `gviz:Portrayal` can only have one gviz:displayIndex (and this property is optional)."@en ;
                ] ;
    sh:property [
                    sh:path cvkd:hasSPARQLFilter ;
                    sh:maxCount 1 ;
                    sh:message "Each `gviz:Portrayal can only refer to one cvkd:SPARQLFilter using the `cvkd:hasSPARQLFilter` property."@en ;
                ] ;
    sh:property [
                    sh:path cvkd:hasTransformOperation ;
                    sh:maxCount 1 ;
                    sh:message """
                        Each `gviz:Portrayal` can only use 0 or 1 time the property 'cvkd:hasTransformOperation'.
                        Note also that the geometry to be used is already attached to the variable '?thisGeometry'
                        so it is expected that the instruction in question will use '?thisGeometry'."""@en ;
                ] .



##########################################################
# Symbolizer and TemplateSymbolizer
##########################################################
# Basically here we define the minimal subset of elements/properties from 'graphic'
# vocabulary that must be defined for each type of symbolizer:
# - PolygonSymbolizer must define Fill (with a fill color) and Stroke (with a stroke color and optionally a stroke width)
# - LineSymbolizer must define Stroke (with a stroke color and optionnaly a stroke width)
# - PointSymbolizer must define a GraphicSymbol with a size and a Mark, containing its wellknownname, a Fill (with a fill color)
#     and a Stroke (with a stroke color and optionally a stroke width).
# - TextSymbolizer must define a Font, a Fill, and a textLabel + optionally a Halo
:fillColorPropertyShape a sh:PropertyShape ;
           sh:path graphic:fillColor ;
           sh:minCount 1 ;
           sh:maxCount 1 .

:strokeColorPropertyShape a sh:PropertyShape ;
                  sh:path graphic:strokeColor ;
                  sh:minCount 1 ;
                  sh:maxCount 1 .

:strokeWidthPropertyShape a sh:PropertyShape ;
                  sh:path graphic:strokeWidth ;
                  sh:maxCount 1 ;
                  sh:datatype xsd:decimal .

:StrokePropertyShape a sh:PropertyShape ;
                     sh:path graphic:hasStroke ;
                     sh:minCount 1 ;
                     sh:maxCount 1 ;
                     sh:property :strokeColorPropertyShape , :strokeWidthPropertyShape .

:FillPropertyShape a sh:NodeShape ;
                   sh:path graphic:hasFill ;
                   sh:minCount 1 ;
                   sh:maxCount 1 ;
                   sh:property :fillColorPropertyShape .

# Note: we could also inform the user (using sh:Info severity level) about other properties he/she can use
# (ie. that are defined in 'graphic' vocabulary and that are read by CoViKoa-client).
:PolygonSymbolizerShape
    a sh:NodeShape ;
    sh:targetClass symblzr:PolygonSymbolizer ;
    sh:property :FillPropertyShape ;
    sh:property :StrokePropertyShape .

:LineSymbolizerShape
    a sh:NodeShape ;
    sh:targetClass symblzr:LineSymbolizer ;
    sh:property :StrokePropertyShape .

:PointSymbolizerShape
    a sh:NodeShape ;
    sh:targetClass symblzr:PointSymbolizer ;
    sh:property [
          sh:path  graphic:hasGraphicSymbol ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:property [
                       sh:path graphic:size ;
                       sh:minCount 1 ;
                       sh:maxCount 1 ;
                   ] ;
          sh:property [
                       sh:path graphic:hasMark ;
                       sh:minCount 1 ;
                       sh:maxCount 1 ;
                       sh:property :FillPropertyShape ;
                       sh:property :StrokePropertyShape ;
                       sh:property [
                                   sh:path graphic:hasWellKnownName ;
                                   sh:minCount 1 ;
                                   sh:maxCount 1 ;
                               ] ;
                   ] ;
      ] .

:TextSymbolizerShape
    a sh:NodeShape ;
    sh:targetClass symblzr:TextSymbolizer , symblzr:TemplateTextSymbolizer ;
    sh:property :FillPropertyShape ;
    sh:property [
          sh:path graphic:hasFont ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
      ] ;
    sh:property [
          sh:path graphic:hasHalo  ;
          sh:minCount 0 ;
          sh:maxCount 1 ;
      ] .

:targetSymbolizer
    a sh:SPARQLTarget ;
    sh:prefixes : ;
    sh:select """
        SELECT ?this
        WHERE {
            {
                [] symblzr:hasSymbolizer ?this
            } UNION {
                [] symblzr:hasTemplateSymbolizer ?this
            }
        }
        """ .

:SymbolizerExists
    a sh:NodeShape ;
    sh:target :targetSymbolizer ;
    sh:path rdf:type ;
    sh:sparql [
                  a sh:SPARQLConstraint ;
                  sh:message """Each symblzr:Symbolizer referenced must exist in the data graph and it must be defined as a specific subclass of symblzr:Symbolizer or symblzr:TemplateSymbolizer (like symblzr:PointSymbolizer for example)."""@en ;
                  sh:prefixes : ;
                  sh:select """
        SELECT $this ?v1
        WHERE {
            FILTER(
                NOT EXISTS { $this $PATH symblzr:PointSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:LineSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:PolygonSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:TextSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:CompositeSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:TemplatePointSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:TemplateLineSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:TemplatePolygonSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:TemplateCompositeSymbolizer }
                && NOT EXISTS { $this $PATH symblzr:TemplateTextSymbolizer }
            )
        }
        """ ] .

:CustomisableGraphicValueShape
    a sh:NodeShape ;
    rdfs:comment """Verify that cvkd:CustomisableGraphicValue fulfills the necessary constraints."""@en ;
    sh:targetClass cvkd:CustomisableGraphicValue ;
    sh:property [
          sh:path cvkd:formula ;
          sh:datatype xsd:string ;
          sh:minCount 0 ;
          sh:maxCount 1 ;
          sh:pattern "\\?value" ;
          sh:message """Each cvkd:CustomisableGraphicValue can only reference one cvkd:formula and that formula, of type xsd:string, must use the "?value" variable that is bound to the value read from the spatial feature on the property described by cvkd:valueOnProperty."""@en ;
      ] ;
    sh:property [
          sh:path cvkd:valueOnProperty ;
          sh:minCount 1 ;
          sh:maxCount 1 ;
          sh:message """Each cvkd:CustomisableGraphicValue have to link to the property on which the value have to be read on each spatial feature."""@en ;
      # sh:class rdf:Property ; # TODO: to be changed to rdf:List
      # ^^^ not using sh:class rdf:Property because we dont know its the IRI of a property if the ontology is not imported yet
      ] .

##########################################################
# xxxx
##########################################################
# Here we want to validate the sequence path, given as a list of properties,
# for two elements in the Derivation Model
:TargetOfPathFromGvaIsValidPropertyPath
    a sh:NodeShape ;
    sh:targetObjectsOf cvkd:pathFromGVA  ;
    sh:or (
                [ sh:nodeKind sh:IRI ]          # 2.3.1.1: Predicate path
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.2: Sequence path
                  sh:node :PathListWithAtLeast2Members ;
                ]
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.3: Alternative path
                  sh:closed true ;
                  sh:property [
                                  sh:path sh:alternativePath ;
                                  sh:node :PathListWithAtLeast2Members ;
                                  sh:minCount 1 ;
                                  sh:maxCount 1 ;
                              ]
                ]
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.4: Inverse path
                  sh:closed true ;
                  sh:property [
                                  sh:path sh:inversePath ;
                                  sh:minCount 1 ;
                                  sh:maxCount 1 ;
                              ]
                ]
            ) .

:TargetOfPatternPropertyIsValidPropertyPath
    a sh:NodeShape ;
    sh:targetObjectsOf cvkd:propertyPath ;
    sh:or (
                [ sh:nodeKind sh:IRI ]          # 2.3.1.1: Predicate path
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.2: Sequence path
                  sh:node :PathListWithAtLeast2Members ;
                ]
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.3: Alternative path
                  sh:closed true ;
                  sh:property [
                                  sh:path sh:alternativePath ;
                                  sh:node :PathListWithAtLeast2Members ;
                                  sh:minCount 1 ;
                                  sh:maxCount 1 ;
                              ]
                ]
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.4: Inverse path
                  sh:closed true ;
                  sh:property [
                                  sh:path sh:inversePath ;
                                  sh:minCount 1 ;
                                  sh:maxCount 1 ;
                              ]
                ]
            ) .

:TargetOfValueOnPropertyIsValidPropertyPath
    a sh:NodeShape ;
    sh:targetSubjectsOf cvkd:valueOnProperty ;
    sh:property [
          sh:path cvkd:valueOnProperty ;
          sh:node :PropertyPathNodeShape ;
      ] .

##########################################################
# Scale
##########################################################
# We now want to validate that the 'Scale' vocabulary is correctly used :
# - Either the use of min/max zoom level or the use of min/max scale denominator
# - min zoom level is inferior or equal to max zoom level
# - max scale denominator is inferior or equal to min scale denominator
:ScaleShape
    a sh:NodeShape ;
    sh:targetClass scale:Scale ;
    sh:or (
            sh:and (
                sh:property [
                    sh:path scale:hasMaxScaleDenominator ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:datatype xsd:float ;
                    sh:lessThanOrEquals scale:hasMaxScaleDenominator ;
                ]
                sh:property [
                    sh:path scale:hasMinScaleDenominator ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                        sh:datatype xsd:float ;
                ]
            )
            sh:and (
                sh:property [
                    sh:path scale:hasMinZoomLevel  ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:datatype xsd:float ;
                    sh:lessThanOrEquals scale:hasMaxZoomLevel  ;
                ]
                sh:property [
                    sh:path scale:hasMaxZoomLevel ;
                    sh:minCount 1 ;
                    sh:maxCount 1 ;
                    sh:datatype xsd:float ;
                ]
            )
          ) .

##########################################################
# Covikoa-derivation SpatialConstraint
##########################################################


:PreTransformOperationOnlyOnSymbolsWithTransformOperation
    a sh:NodeShape ;
    rdfs:comment """Verify that a gviz:Portrayal using cvkd:preTransformOperation also uses cvkd:hasTransformOperation."""@en ;
    sh:targetClass gviz:Portrayal ;
    sh:path cvkd:preTransformOperation ;
    sh:sparql [
                  a sh:SPARQLConstraint ;
                  sh:message "Each gviz:Portrayal using cvkd:preTransformOperation should also uses cvkd:hasTransformOperation."@en ;
                  sh:prefixes : ;
                  sh:select """
			SELECT $this ?v1
			WHERE {
				$this $PATH ?v1 .
				FILTER (
				    NOT EXISTS {
				        $this cvkd:hasTransformOperation ?_ .
				    }
				)
			}
			""" ] .

##########################################################
# Warnings regarding cartographic / geoviz practices
##########################################################
:EachMapHasATitle
    a sh:NodeShape ;
    rdfs:comment """Verify that each gviz:Map2dComponent has a title is there is multiple maps."""@en ;
    sh:targetClass gviz:Map2dComponent ;
    sh:path dct:title ;
    sh:severity sh:Warning ;
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message "Each gviz:Map2dComponent should define a title with 'dct:title' when more than one gviz:Map2dComponent are defined."@en ;
          sh:prefixes : ;
          sh:select """
            PREFIX dct: <http://purl.org/dc/terms/>

            SELECT $this WHERE {
              {
                SELECT (count(?map) as ?nMaps) $this WHERE {
                    ?app gviz:hasGeoVisualComponent ?map .
                    ?map a gviz:Map2dComponent .
                } GROUP BY $this # Because it seems that "Sub-query must return all potentially pre-bound variables including $this", SPARQL Syntax rules (Appendix A)
              }
              $this a gviz:Map2dComponent .
              FILTER (
                NOT EXISTS {
                  $this dct:title ?title .
                }
              ).
              FILTER(?nMaps > 1).
            }
            """ ] .

:MapOrApplicationHasATitle
    a sh:NodeShape ;
    rdfs:comment """Verify that the gviz:Map2dComponent or the gviz:GeoVisualApplication has a title when there is only one map."""@en ;
    sh:targetClass gviz:Map2dComponent ;
    sh:path dct:title ;
    sh:severity sh:Warning ;
    sh:sparql [
          a sh:SPARQLConstraint ;
          sh:message "Each gviz:Map2dComponent (or the parent gviz:GeoVisualApplication) should define a title with 'dct:title'."@en ;
          sh:prefixes : ;
          sh:select """
            PREFIX dct: <http://purl.org/dc/terms/>

            SELECT $this WHERE {
              {
                SELECT (count(?map) as ?nMaps) $this WHERE {
                    ?app gviz:hasGeoVisualComponent ?map .
                    ?map a gviz:Map2dComponent .
                } GROUP BY $this
              }
              FILTER(?nMaps = 1).
              ?app a gviz:GeoVisualApplication .
              OPTIONAL {
                ?app dct:title ?appTitle .
              }
              OPTIONAL {
                $this dct:title ?mapTitle .
              }
              FILTER(!BOUND(?mapTitle) && !BOUND(?appTitle)).
            }
            """ ] .

:PortrayalsShouldHaveTitleIfAppearOnLegend
    a sh:NodeShape ;
    rdfs:comment """Portrayals that appear on legend (and the symbols they reference) should have a title using dct:title property."""@en ;
    sh:targetClass gviz:Portrayal .


:SymbolsShouldHaveTitleIfAppearOnLegend
    a sh:NodeShape ;
    rdfs:comment """Symbols that appear on legend (and the portrayals that reference them) should have a title using dct:title property."""@en ;
    sh:targetClass symb:Symbol .


##########################################################
# Interaction
##########################################################
:InteractionShape
    a sh:NodeShape ;
    rdfs:comment """Verify that ion:Interaction fulfills the necessary constraints."""@en ;
    sh:targetClass ion:Interaction .

# TODO :
# - If multiple maps: each Portrayal should specify on which component it should be displayed
# - If table: exactly one Portrayal should specify to be materialised on this component
# - If legend: portrayal + symbols should have dct:title
# - Interaction: 1 or more Outcome + exctly 1 event + exactly 1 analytical purpose
#    - Outcome: exactly 1 component + (nothing or exactly 1 symbolizerModifier or exactly 1 symbolizer)


### The following is taken (and slightly adapted) from https://www.w3.org/TR/shacl/#shacl-shacl
_:PathPath
    sh:alternativePath (
                           ( [ sh:zeroOrMorePath rdf:rest ] rdf:first )
                           ( sh:alternativePath [ sh:zeroOrMorePath rdf:rest ] rdf:first )
                           sh:inversePath
                       ) .

:PathShape
    a sh:NodeShape ;
    rdfs:label "Path shape"@en ;
    rdfs:comment "A shape that can be used to validate the syntax rules of well-formed SHACL paths."@en ;
    rdfs:seeAlso <https://www.w3.org/TR/shacl/#property-paths> ;
    sh:property [
          sh:path [ sh:zeroOrMorePath _:PathPath ] ;
          sh:node :PropertyPathNodeShape ;
      ] .

:PathListWithAtLeast2Members
    a sh:NodeShape ;
    sh:node :ListShape ;
    sh:property [
          sh:path [ sh:oneOrMorePath rdf:rest ] ;
          sh:minCount 2 ;    # 1 other list node plus rdf:nil
      ] .

:PropertyPathNodeShape
    sh:xone (
                [ sh:nodeKind sh:IRI ]          # 2.3.1.1: Predicate path
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.2: Sequence path
                  sh:node :PathListWithAtLeast2Members ;
                ]
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.3: Alternative path
                  sh:closed true ;
                  sh:property [
                                  sh:path sh:alternativePath ;
                                  sh:node :PathListWithAtLeast2Members ;
                                  sh:minCount 1 ;
                                  sh:maxCount 1 ;
                              ]
                ]
                [ sh:nodeKind sh:BlankNode ;    # 2.3.1.4: Inverse path
                  sh:closed true ;
                  sh:property [
                                  sh:path sh:inversePath ;
                                  sh:minCount 1 ;
                                  sh:maxCount 1 ;
                              ]
                ]
            ) .

:ListShape
    a sh:NodeShape ;
    rdfs:label "List shape"@en ;
    rdfs:comment "A shape describing well-formed RDF lists. Currently does not check for non-recursion. This could be expressed using SHACL-SPARQL."@en ;
    rdfs:seeAlso <https://www.w3.org/TR/shacl/#syntax-rule-SHACL-list> ;
    sh:property [
          sh:path [ sh:zeroOrMorePath rdf:rest ] ;
          rdfs:comment "Each list member (including this node) must be have the shape shsh:ListNodeShape."@en ;
          sh:hasValue rdf:nil ;
          sh:node :ListNodeShape ;
      ] .

:ListNodeShape
    a sh:NodeShape ;
    rdfs:label "List node shape"@en ;
    rdfs:comment "Defines constraints on what it means for a node to be a node within a well-formed RDF list. Note that this does not check whether the rdf:rest items are also well-formed lists as this would lead to unsupported recursion."@en ;
    sh:or ( [
                sh:hasValue rdf:nil ;
                sh:property [
                                sh:path rdf:first ;
                                sh:maxCount 0 ;
                            ] ;
                sh:property [
                                sh:path rdf:rest ;
                                sh:maxCount 0 ;
                            ] ;
            ]
            [
                sh:not [ sh:hasValue rdf:nil ] ;
                sh:property [
                           sh:path rdf:first ;
                           sh:maxCount 1 ;
                           sh:minCount 1 ;
                       ] ;
                sh:property [
                           sh:path rdf:rest ;
                           sh:maxCount 1 ;
                           sh:minCount 1 ;
                       ] ;
            ] ) .

