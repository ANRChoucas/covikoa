@prefix : <http://example.com/cvk-ir#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix geo: <http://www.opengis.net/ont/geosparql#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix gviz: <http://lig-tdcge.imag.fr/steamer/covikoa/geoviz#> .
@prefix loac: <http://purl.org/loac#> .
@prefix cvkr: <http://lig-tdcge.imag.fr/steamer/covikoa/derivation#> .
@prefix graphic: <https://gis.lu.se/ont/data_portrayal/graphic#> .
@prefix symb: <https://gis.lu.se/ont/data_portrayal/symbol#> .
@prefix symblzr: <https://gis.lu.se/ont/data_portrayal/symbolizer#> .
@prefix cvc: <http://lig-tdcge.imag.fr/steamer/covikoa/context#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix geof: <http://www.opengis.net/def/function/geosparql/> .

# Describe a vocabulary, build from CoViKoa-Geoviz,
# covikoa-derivation and from the Semantic Data Model to visualize (here OAC - the Light Choucas Alert Ontology)
#
# We declare the prefix / namespace corresponding to the Semantic Data Model we are targeting (loac)
# so that we can reuse it directly in the literal value of the ConditionFilter we will define later.
:
    a owl:Ontology ;
    sh:declare [
                   sh:prefix "loac" ;
                   sh:namespace "http://purl.org/loac#"^^xsd:anyURI ;
               ] .

# Describes what is the purpose of this Derivation Model:
# making an application for handling and geovisualising CHOUCAS "hypothesis".
# We will instatiate this class later in the Derivation Model.
:AppChoucasHypo a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualApplication ;
    gviz:represents loac:Hypothesis .

# From now we will describe all the concept from the targeted SDM
# that should be derived by CoViKoa in order geovisually represent them.

# The first one is the InitialSearchArea
:InitialSearchAreaOAVM a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation ;
    gviz:represents loac:InitialSearchArea ;
    cvkr:hasDataIntegrationRule :OSMRefObjectContainedInISA ;
    cvkr:pathFromGVA (loac:hasInitialSearchArea) .

# This one is the Reference Object (they are pulled from OSM
# and get a category from our hierarchy of concept)
:ReferenceObjectOAVM a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation ;
    gviz:represents loac:ReferenceObject ;
    cvkr:pathFromGVA (loac:hasInitialSearchArea loac:contains) .


# The Compatible Location Area
:CompatibleLocationAreaOAVM a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation ;
    gviz:represents loac:CompatibleLocationArea ;
    cvkr:pathFromGVA (loac:hasClue loac:hasCompatibleLocationArea) .

# And finally the Probable Location Area (the one which is supposed to contain the victim)
:ProbableLocationAreaOAVM a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation ;
    gviz:represents loac:ProbableLocationArea ;
    cvkr:pathFromGVA (loac:hasProbableLocationArea) .


### Below is what ties the different elements needed to reason on what needs to be displayed to process a CHOUCAS alert.

# Now that we have a gviz:Component, the intermediate representation of the various OAC concepts
# that can be displayed will be derived automatically (given the "derivation model" shown in derivation-model.ttl file)
# and will be assigned a suggested graphical representation whenever possible (also defined in derivation-model.ttl file).

:HypothesisMap a gviz:Map2dComponent . ## <- our GeoVisualComponent

:AppHypothesisChoucas a :AppChoucasHypo ; ## <- it implements making a concrete GeoVisualApplication for diplaying a specific hypothesis of an alert
    gviz:represents loac:hypo1 ; ## <- this is the entry point in the target semantic data model, the hypothesis, and all its related knowledge, we want to geovisualize (it allows us to generate rules that only produces the IR of the data related to it)
    gviz:hasGeoVisualComponent :HypothesisMap ;
    cvc:hasVisualisationContext :DefaultVizContext .

### Symbol and symbolizer for the Initial Search Area (ISA)

:SymbolizerISA a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgb(255,165,0)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(211, 211, 211, 0.7)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolISA a symb:Symbol ;
    gviz:denotesGVR :InitialSearchAreaOAVM ;
    gviz:displayIndex 1000 ;
    symblzr:hasSymbolizer :SymbolizerISA ;
    cvkr:transformOperation [
        geof:difference (
                [cvkr:value "POLYGON ((-180 -90, -180 90, 180 90, 180 -90, -180 -90))"^^geo:wktLiteral]
                [cvkr:variable "?thisGeometry"]
        )
    ] .
### Symbol and symbolizer for the Compatible Location Areas (CLA)

:SymbolizerCLA a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgb(138,43,226,0.7)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgb(218,112,214,0.7)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolCLA a symb:Symbol ;
    gviz:denotesGVR :CompatibleLocationAreaOAVM ;
    gviz:displayIndex 3 ;
    symblzr:hasSymbolizer :SymbolizerCLA .


### Symbol and symbolizer for the Probable Location Area (PLA)

:SymbolizerPLA a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgba(139,0,0,1)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(255,0,0,1)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolPLA a symb:Symbol ;
    gviz:denotesGVR :ProbableLocationAreaOAVM ;
    gviz:displayIndex 2 ;
    symblzr:hasSymbolizer :SymbolizerPLA .

###################################################################
# Symbol and symbolizers for reference objects
# (only 5 categories will be depicted on the map :
#  LAKE, VILLAGE, CITY, ROAD and PATHWAY)
###################################################################

:SymbolizerLakePolygon a symblzr:PolygonSymbolizer ;
    cvkr:patternObject loac:LAKE ;
    graphic:hasStroke [ a graphic:Stroke ;
                        graphic:strokeColor "rgb(0,153,153)"^^graphic:cssColorLiteral ;
    ] ;
    graphic:hasFill [ a graphic:Fill ;
                      graphic:fillColor "rgba(0,102,204,1)"^^graphic:cssColorLiteral ;
    ] .

:SymbolizerVillage a symblzr:PointSymbolizer ;
    cvkr:patternObject loac:VILLAGE ;
    cvkr:patternObject loac:CITY ;  # <- works fine to have multiple for the same Symbolizer
    graphic:hasShape [ a graphic:Circle ;
                      graphic:radius 4 ;
                    ] ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgba(0,0,0,1)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(70,70,70,0.5)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolizerRoad a symblzr:LineSymbolizer ;
                cvkr:patternObject loac:ROAD ;
                graphic:hasStroke [ a graphic:Stroke ;
                                    graphic:strokeColor "rgb(0,0,0)"^^graphic:cssColorLiteral ;
                                  ] .

:SymbolizerPathway a symblzr:LineSymbolizer ;
                cvkr:patternObject loac:PATHWAY ;
                graphic:hasStroke [ a graphic:Stroke ;
                                    graphic:strokeColor "rgba(40,40,40,0.9)"^^graphic:cssColorLiteral ;
                                    graphic:strokeWidth 0.75 ;
                                  ] .

:DefaultSymbolRefObjet a symb:Symbol ;
    gviz:denotesGVR :ReferenceObjectOAVM ;
    cvkr:hasMatchingPattern :patternCategoryOAC ;
    symblzr:hasSymbolizer :SymbolizerRoad ;
    symblzr:hasSymbolizer :SymbolizerPathway ;
    symblzr:hasSymbolizer :SymbolizerVillage ;
    symblzr:hasSymbolizer :SymbolizerLakePolygon ;
    cvkr:preTransformOperation """loac:hypo1 loac:hasInitialSearchArea [ geo:hasGeometry [ geo:asWKT ?geomIsa ] ]""" ;
    cvkr:transformOperation [
        geof:intersection (
            [cvkr:variable "?geomIsa"]
            [cvkr:variable "?thisGeometry"]
        )
    ] .

# We can reuse it to describe that we want to match this
# pattern for both the default style of the reference objects
# and for the "problem specific" style of these objects
:patternCategoryOAC a cvkr:MatchingPattern ;
    cvkr:patternProperty loac:hasCategory .


###################################################################
# Symbol and symbolizers for highlighting reference objects of
# interest in the Probable Location Area
# (so these styles are corresponding to the ConditionFilter
# with the label "ObjectOfInterestInISA")
###################################################################
:SymbolizerReferenceFeatureHighlightPt a symblzr:PointSymbolizer ;
    graphic:hasShape [ a graphic:Circle ;
                      graphic:radius 5 ;
                    ] ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgba(20,128,0,1)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(127,255,0,1)"^^graphic:cssColorLiteral ;
                   ] .


:SymbolizerReferenceFeatureHighlightLine a symblzr:LineSymbolizer ;
     graphic:hasStroke [ a graphic:Stroke ;
                         graphic:strokeColor "rgb(255,165,0)"^^graphic:cssColorLiteral ;
                       ] .

:SymbolizerReferenceFeatureHighlightPolygon a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgb(255,165,0)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(211, 211, 211, 0.7)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolReferenceFeatureHighlight a symb:Symbol ;
    gviz:denotesGVR :ReferenceObjectOAVM ;
    gviz:displayIndex 1 ;
    symblzr:hasSymbolizer :SymbolizerReferenceFeatureHighlightPt ;
    symblzr:hasSymbolizer :SymbolizerReferenceFeatureHighlightLine ;
    symblzr:hasSymbolizer :SymbolizerReferenceFeatureHighlightPolygon ;
    cvkr:hasConditionFilter [ a cvkr:ConditionFilter ;
        rdfs:label "ObjectOfInterestInISA" ;
        rdf:value """
        SELECT DISTINCT ?somethingRepresentable WHERE {
            {
                SELECT
                    (GROUP_CONCAT(?catTarget ; separator=\",\") as ?cats)
                    (GROUP_CONCAT(?pcatTarget ; separator=\",\") as ?pcats)
                WHERE {
                    ?probableLocArea loac:merges ?zone .
                    ?clue loac:hasCompatibleLocationArea ?zone ;
                          loac:hasLocationRelation/loac:hasTarget ?ftTarget .
                    ?ftTarget loac:hasCategory ?catTarget .
                    ?catTarget loac:hasParentCategory ?pcatTarget .
                }
            }
            loac:hypo1 loac:hasProbableLocationArea ?probableLocArea .
            BIND(cvkr:UnPackGeomWKT(?probableLocArea) as ?geomProbableLocArea).
            ?somethingRepresentable a loac:ReferenceObject ;
                                    loac:hasCategory ?cat ;
                                    geo:hasGeometry [geo:asWKT ?geomObjet ] .
            ?cat loac:hasParentCategory ?pcat .
            FILTER(!CONTAINS(?cats, STR(?cat)) && !CONTAINS(?pcats, STR(?pcat))) .
            FILTER(geof:sfIntersects(?geomProbableLocArea, ?geomObjet)) .
        }
        """ ] ;
    cvkr:preTransformOperation """loac:hypo1 loac:hasInitialSearchArea [ geo:hasGeometry [ geo:asWKT ?geomIsa ] ]""" ;
    cvkr:transformOperation [
        geof:intersection (
            [cvkr:variable "?geomIsa"]
            [cvkr:variable "?thisGeometry"]
        )
    ] .

# We define a VisualisationContext (this is the initial expected state of the geovisualisation component to be created)
:DefaultVizContext a cvc:VisualisationContext ;
                   cvc:hasMap [ a cvc:ClientMapObject ;
                                owl:sameAs :HypothesisMap ;
                                cvc:widthPx 600 ;
                                cvc:heightPx 500 ;
                              ] ;
#                   cvc:hasUserContext [ a cvc:UserContext ;
#                                        cvc:hasColorVisionDeficiency cvc:Dichromacy ;
#                                      ] ;
                    .

# This is the rule allowing to integrate data from other services (using a SPARQL federated query).
:OSMRefObjectContainedInISA
    a sh:NodeShape , cvkr:DataIntegrationRule ;
    rdfs:comment """
        Rule allowing to use the properties of the Initial Search Area (its geometry and the fact that it is an ISA)
        to retrieve all the reference objects (from OSM) in the corresponding portion of territory that can be used
        as reference during an alert.
        We take this opportunity to read the type of geometry (in the WKT representation of the geometry)
        and describe it with the appropriate class of the Simple Feature Ontology (http://www.opengis.net/ont/sf)."""@en ;
    sh:targetClass loac:InitialSearchArea ;
    sh:rule [
                a sh:SPARQLRule ;
                sh:construct """
		    prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            prefix loac: <http://purl.org/loac#>
            prefix gviz: <http://lig-tdcge.imag.fr/steamer/covikoa/geoviz#>
            prefix geo: <http://www.opengis.net/ont/geosparql#>
            prefix geof: <http://www.opengis.net/def/function/geosparql/>

            CONSTRUCT {
                ?ft a loac:ReferenceObject ;
                    loac:hasCategory ?cat ;
                    loac:isContainedIn ?zir ;
                    geo:hasGeometry [ a ?geomType ; geo:asWKT ?geomFtWkt] .
                ?ft loac:osmName ?osmName .
            } WHERE {
                NOT EXISTS { ?ft loac:isContainedIn ?zir . }
                ?alerteOavm gviz:represents [
                    loac:hasInitialSearchArea ?zir ;
                ] .
                ?zir geo:hasGeometry [geo:asWKT ?geomZirWkt] .
                SERVICE <http://localhost:3330/ds> {
                    ?ft a loac:ReferenceObject ;
                        loac:hasCategory ?cat ;
                        geo:hasGeometry [geo:asWKT ?geomFtWkt] .
                    OPTIONAL { ?ft loac:osmName ?osmName . }
                }
                FILTER(geof:sfIntersects(?geomZirWkt, ?geomFtWkt)).
                BIND(
                    IF(CONTAINS(STR(?geomFtWkt), "MULTIPOINT"), IRI("http://www.opengis.net/ont/sf#MultiPoint"),
                    IF(CONTAINS(STR(?geomFtWkt), "POINT"), IRI("http://www.opengis.net/ont/sf#Point"),
                    IF(CONTAINS(STR(?geomFtWkt), "MULTILINESTRING"), IRI("http://www.opengis.net/ont/sf#MultiLineString"),
                    IF(CONTAINS(STR(?geomFtWkt), "LINESTRING"), IRI("http://www.opengis.net/ont/sf#LineString"),
                    IF(CONTAINS(STR(?geomFtWkt), "MULTIPOLYGON"), IRI("http://www.opengis.net/ont/sf#MultiPolygon"),
                    IF(CONTAINS(STR(?geomFtWkt), "POLYGON"), IRI("http://www.opengis.net/ont/sf#Polygon"),
                    IRI("http://www.opengis.net/ont/sf#Geometry")))))))
                AS ?geomType).
            }
    """ ;
            ] .