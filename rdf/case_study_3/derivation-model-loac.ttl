@prefix : <http://example.com/cvk-ir#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix geo: <http://www.opengis.net/ont/geosparql#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix gviz: <http://lig-tdcge.imag.fr/steamer/covikoa/geoviz#> .
@prefix loac: <http://purl.org/loac#> .
@prefix cvkr: <http://lig-tdcge.imag.fr/steamer/covikoa/derivation#> .
@prefix graphic: <https://gis.lu.se/ont/data_portrayal/graphic#> .
@prefix symb: <https://gis.lu.se/ont/data_portrayal/symbol#> .
@prefix symblzr: <https://gis.lu.se/ont/data_portrayal/symbolizer#> .
@prefix cvc: <http://lig-tdcge.imag.fr/steamer/covikoa/context#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix geof: <http://www.opengis.net/def/function/geosparql/> .
@prefix scale: <https://gis.lu.se/ont/visualisation_scale#> .

# Describe a vocabulary, build from CoViKoa-Geoviz,
# covikoa-derivation and from the Semantic Data Model to visualize (here LOAC - the Light Choucas Alert Ontology)
#
# We declare the prefix / namespace corresponding to the Semantic Data Model we are targeting (loac)
# so that we can reuse it directly in the literal value of the ConditionFilter we will define later.
:
    a owl:Ontology ;
    sh:declare [

                   sh:prefix "loac" ;
                   sh:namespace "http://purl.org/loac#"^^xsd:anyURI ;
               ] .

:AppChoucasHypo a owl:Class ; ## <- We want to make an application for handling CHOUCAS Alerts, at the hypothesis level
    rdfs:subClassOf gviz:GeoVisualApplication ;
    gviz:represents loac:Hypothesis .

:InitialSearchAreaOAVM a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation ;
    gviz:represents loac:InitialSearchArea ;
    cvkr:hasDataIntegrationRule :OSMRefObjectContainedInISA ;
    cvkr:pathFromGVA (loac:hasInitialSearchArea) .

:ReferenceObjectOAVM a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation ;
    gviz:represents loac:ReferenceObject ;
    cvkr:pathFromGVA (loac:hasInitialSearchArea loac:contains) .

:CompatibleLocationAreaOAVM a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation ;
    gviz:represents loac:CompatibleLocationArea ;
    cvkr:pathFromGVA (loac:hasClue loac:hasCompatibleLocationArea) .

:ProbableLocationAreaOAVM a owl:Class ;
    rdfs:subClassOf gviz:GeoVisualIntermediateRepresentation ;
    gviz:represents loac:ProbableLocationArea ;
    cvkr:pathFromGVA (loac:hasProbableLocationArea) .


### Below is what ties the different elements needed to reason on what needs to be displayed to process a CHOUCAS alert.

# Now that we have a gviz:Component, the intermediate representation of the various LOAC concepts
# that can be displayed will be derived automatically (given the "derivation model" shown in derivation-model.ttl file)
# and will be assigned a suggested graphical representation whenever possible (also defined in derivation-model.ttl file).

:HypothesisMap a gviz:Map2dComponent ; ## <- our GeoVisualComponent
               cvkr:hasDefaultExtent loac:InitialSearchArea .

# No legend here, see case study 4 for an example of legend...
#:HypothesisMapLegend a gviz:LegendComponent ;
#                gviz:linkedTo :HypothesisMap .

:AppHypothesisChoucas a :AppChoucasHypo ; ## <- it implements making a concrete GeoVisualApplication for diplaying a specific hypothesis of an alert
    gviz:represents loac:hypo1 ; ## <- this is the entry point in the target semantic data model, the hypothesis, and all its related knowledge, we want to geovisualize (it allows us to generate rules that only produces the IR of the data related to it)
    gviz:hasGeoVisualComponent :HypothesisMap ;
    cvc:hasVisualisationContext :DefaultVizContext .

# Symbol and symbolizer for the Initial Search Area (ISA)

:SymbolizerISA a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgb(255,165,0)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(211, 211, 211, 0.7)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolISA a symb:Symbol ;
    gviz:denotesGVR :InitialSearchAreaOAVM ;
    gviz:displayIndex 1000 ;
    symblzr:hasSymbolizer :SymbolizerISA ;
    cvkr:transformOperation [
        geof:difference (
            [cvkr:value "POLYGON ((-180 -90, -180 90, 180 90, 180 -90, -180 -90))"^^geo:wktLiteral]
            [cvkr:variable "?thisGeometry"]
        )
    ] .


:SymbolizerISAHighZoomScale a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgb(255,165,0)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(211, 211, 211, 0.7)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolISAHighZoom a symb:Symbol ;
    gviz:denotesGVR :InitialSearchAreaOAVM ;
    gviz:displayIndex 1000 ;
    symblzr:hasSymbolizer :SymbolizerISAHighZoomScale ;
    cvkr:preTransformOperation """loac:hypo1 loac:hasProbableLocationArea [ geo:hasGeometry [ geo:asWKT ?geomPla ] ]""" ;
    cvkr:transformOperation [
        geof:difference (
            [cvkr:variable "?thisGeometry"]
            [cvkr:variable "?geomPla"]
        )
    ] ;
    cvkr:onValidScale :HighZoomScale .


# Symbol and symbolizers for the Compatible Location Areas (CLA)
# It shows how to use a list of property to describe how to reach a
# specific object to trigger a conditional styling
# (in our case ...)
:SymbolizerCLA a symblzr:PolygonSymbolizer ;
    cvkr:patternObject loac:VILLAGE ; # See :patternCLACategoryOAC just below
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgb(138,43,226,0.7)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgb(218,112,214,0.7)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolizerCLARoadPath a symblzr:PolygonSymbolizer ;
    cvkr:patternObject loac:PATHWAY ; # See :patternCLACategoryOAC just below
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgb(220,220,43,0.7)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgb(112,214,218,0.7)"^^graphic:cssColorLiteral ;
                   ] .

# The cvkr:patternObject to reach is located at the end of this path,
# starting from the concept (in the SDM) denoted by the IR using this MatchingPattern (see just below).
:patternCLACategoryOAC a cvkr:MatchingPattern ;
   cvkr:patternPropertyChain (loac:isCLAforClue loac:hasLocationRelation loac:hasTarget loac:hasCategory) .

# Define two symbols so that depending on the scale, we use a different geometries, but the same symbolisers
:SymbolHighScaleCLA a symb:Symbol ;
    gviz:denotesGVR :CompatibleLocationAreaOAVM ;
    gviz:displayIndex 3 ;
    cvkr:hasMatchingPattern :patternCLACategoryOAC ;
    symblzr:hasSymbolizer :SymbolizerCLA ;
    symblzr:hasSymbolizer :SymbolizerCLARoadPath ;
    cvkr:preTransformOperation """loac:hypo1 loac:hasProbableLocationArea [ geo:hasGeometry [ geo:asWKT ?geomPla ] ]""" ;
    cvkr:transformOperation [
        geof:difference (
            [cvkr:variable "?thisGeometry"]
            [cvkr:variable "?geomPla"]
        )
    ] ;
    cvkr:onValidScale :HighZoomScale .

:SymbolLowScaleCLA a symb:Symbol ;
    gviz:denotesGVR :CompatibleLocationAreaOAVM ;
    gviz:displayIndex 3 ;
    cvkr:hasMatchingPattern :patternCLACategoryOAC ;
    symblzr:hasSymbolizer :SymbolizerCLA ;
    symblzr:hasSymbolizer :SymbolizerCLARoadPath ;
    cvkr:onValidScale :LowZoomScale .

### Symbol and symbolizer for the Probable Location Area (PLA)

:SymbolizerLowScalePLA a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgba(244,12,12,1)"^^graphic:cssColorLiteral ;
                       graphic:strokeWidth 2.0 ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(255,0,0,0.5)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolLowScalePLA a symb:Symbol ;
    gviz:denotesGVR :ProbableLocationAreaOAVM ;
    gviz:displayIndex 2 ;
    symblzr:hasSymbolizer :SymbolizerLowScalePLA ;
    cvkr:onValidScale :LowZoomScale .

:SymbolizerHighScalePLA a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgba(255,0,0,1)"^^graphic:cssColorLiteral ;
                       graphic:strokeWidth 2.5 ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(255,0,0,0)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolHighScalePLA a symb:Symbol ;
           gviz:denotesGVR :ProbableLocationAreaOAVM ;
           gviz:displayIndex 2 ;
           symblzr:hasSymbolizer :SymbolizerHighScalePLA ;
           cvkr:onValidScale :HighZoomScale .

###################################################################
###################################################################
### Symbol and symbolizer for highlighting reference objects of interest in the
### Probable Location Area
###################################################################
###################################################################

### Styles corresponding to the ConditionFilter with the label "ObjectOfInterestInISA"
### Note that we want to display differently the part of the objects inside and outside
### of the ProbableLocationArea, so we need to define style and the appropriate transformOperations
### for both of them.
:SymbolizerReferenceFeatureHighlightPt a symblzr:PointSymbolizer ;
            graphic:hasMark [ a graphic:Mark ;
                  graphic:hasWellKnownName graphic:circle ;
                  graphic:hasStroke [ a graphic:Stroke ;
                                      graphic:strokeColor "rgba(20,128,0,1)"^^graphic:cssColorLiteral ;
                    ] ;
                  graphic:hasFill [ a graphic:Fill ;
                                    graphic:fillColor "rgba(127,255,0,1)"^^graphic:cssColorLiteral ;
                    ] ;
              ] ;
            graphic:size "5"^^xsd:decimal .

:SymbolizerReferenceFeatureHighlightLine a symblzr:LineSymbolizer ;
     graphic:hasStroke [ a graphic:Stroke ;
                         graphic:strokeColor "rgb(127,255,0)"^^graphic:cssColorLiteral ;
                         graphic:strokeWidth 3.0 ;
                       ] .

:SymbolizerReferenceFeatureHighlightPolygon a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                       graphic:strokeColor "rgb(20,25,20)"^^graphic:cssColorLiteral ;
                     ] ;
    graphic:hasFill [ a graphic:Fill ;
                     graphic:fillColor "rgba(255, 170, 20, 1)"^^graphic:cssColorLiteral ;
                   ] .

:SymbolizerReferenceFeatureHighlightLineOutside a symblzr:LineSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                     graphic:strokeColor "rgba(127,255,0, 0.8)"^^graphic:cssColorLiteral ;
                     graphic:strokeWidth 2.5 ;
                     graphic:strokeDashArray "4 8" ;
                     graphic:strokeDashOffset 2.0 ;
                    ] .

:SymbolizerReferenceFeatureHighlightPolygonOutside a symblzr:PolygonSymbolizer ;
    graphic:hasStroke [ a graphic:Stroke ;
                        graphic:strokeColor "rgb(20,25,20)"^^graphic:cssColorLiteral ;
                      ] ;
    graphic:hasFill [ a graphic:Fill ;
                      graphic:fillColor "rgba(255, 170, 20, 1)"^^graphic:cssColorLiteral ;
                    ] .

:ConditionFilterRefObjectPLA a cvkr:ConditionFilter ;
        rdfs:label "ObjectOfInterestInISA" ;
        rdf:value """
        SELECT DISTINCT ?somethingRepresentable WHERE {
            {
                SELECT
                    (GROUP_CONCAT(?catTarget ; separator=\",\") as ?cats)
                    (GROUP_CONCAT(?pcatTarget ; separator=\",\") as ?pcats)
                WHERE {
                    ?probableLocArea loac:merges ?zone .
                    ?clue loac:hasCompatibleLocationArea ?zone ;
                          loac:hasLocationRelation/loac:hasTarget ?ftTarget .
                    ?ftTarget loac:hasCategory ?catTarget .
                    ?catTarget loac:hasParentCategory ?pcatTarget .
                }
            }
            loac:hypo1 loac:hasProbableLocationArea ?probableLocArea .
            BIND(cvkr:UnPackGeomWKT(?probableLocArea) as ?geomProbableLocArea).
            ?somethingRepresentable a loac:ReferenceObject ;
                                    loac:hasCategory ?cat ;
                                    geo:hasGeometry [geo:asWKT ?geomObjet ] .
            ?cat loac:hasParentCategory ?pcat .
            FILTER(!CONTAINS(?cats, STR(?cat)) && !CONTAINS(?pcats, STR(?pcat))) .
            FILTER(geof:sfIntersects(?geomProbableLocArea, ?geomObjet)) .
        }
        """ .

:SymbolReferenceFeatureHighlightInsidePLA a symb:Symbol ;
    gviz:denotesGVR :ReferenceObjectOAVM ;
    gviz:displayIndex 1 ;
    symblzr:hasSymbolizer :SymbolizerReferenceFeatureHighlightPt , :SymbolizerReferenceFeatureHighlightLine , :SymbolizerReferenceFeatureHighlightPolygon ;
    cvkr:preTransformOperation """loac:hypo1 loac:hasProbableLocationArea [ geo:hasGeometry [ geo:asWKT ?geomPla ] ]""" ;
    cvkr:transformOperation [
        geof:intersection (
            [cvkr:variable "?thisGeometry"]
            [cvkr:variable "?geomPla"]
        )
    ] ;
    cvkr:hasConditionFilter :ConditionFilterRefObjectPLA .

:SymbolReferenceFeatureHighlightOutsidePLA a symb:Symbol ;
    gviz:denotesGVR :ReferenceObjectOAVM ;
    gviz:displayIndex 1 ;
    symblzr:hasSymbolizer :SymbolizerReferenceFeatureHighlightLineOutside , :SymbolizerReferenceFeatureHighlightPolygonOutside ;
    cvkr:preTransformOperation """loac:hypo1 loac:hasProbableLocationArea [ geo:hasGeometry [ geo:asWKT ?geomPla ] ]""" ;
    cvkr:transformOperation [
        geof:difference (
            [cvkr:variable "?thisGeometry"]
            [cvkr:variable "?geomPla"]
        )
    ] ;
    cvkr:hasConditionFilter :ConditionFilterRefObjectPLA .

### We also want to display, on high zoom levels, the objets used as target in the clue given by the victim
:ConditionFilterObjectUsedInClue a cvkr:ConditionFilter ;
        rdfs:label "ObjectUsedInClue" ;
        rdf:value """
        SELECT DISTINCT ?somethingRepresentable WHERE {
            loac:hypo1 loac:hasClue [ loac:hasLocationRelation [ loac:hasTarget ?somethingRepresentable ] ] .
        }
        """ .
:SymbolizerReferenceFeatureUsedInClueLine a symblzr:LineSymbolizer ;
     graphic:hasStroke [ a graphic:Stroke ;
                         graphic:strokeColor "rgb(47,30,15)"^^graphic:cssColorLiteral ;
                         graphic:strokeWidth 1.5 ;
                       ] .

:SymbolReferenceFeatureUsedInClue a symb:Symbol ;
    gviz:denotesGVR :ReferenceObjectOAVM ;
    gviz:displayIndex 1 ;
    symblzr:hasSymbolizer :SymbolizerReferenceFeatureUsedInClueLine ;
    cvkr:hasConditionFilter :ConditionFilterObjectUsedInClue ;
    cvkr:preTransformOperation """loac:hypo1 loac:hasProbableLocationArea [ geo:hasGeometry [ geo:asWKT ?geomPla ] ]""" ;
    cvkr:transformOperation [
        geof:intersection (
            [cvkr:variable "?thisGeometry"]
            [cvkr:variable "?geomPla"]
        )
    ] ;
    cvkr:onValidScale :HighZoomScale .


:DefaultVizContext a cvc:VisualisationContext ;
                   cvc:hasMap [ a cvc:ClientMapObject ;
                                owl:sameAs :HypothesisMap ;
                                cvc:widthPx 980 ;
                                cvc:heightPx 600 ;
                              ] .

### This is the rule allowing to trigger a federated query in order to integrate data in our data graph at run time
:OSMRefObjectContainedInISA
    a sh:NodeShape , cvkr:DataIntegrationRule ;
    rdfs:comment """
        Rule allowing to use the properties of the Initial Search Area (its geometry and the fact that it is an ISA)
        to retrieve all the reference objects (from OSM) in the corresponding portion of territory that can be used
        as reference during an alert.
        We take this opportunity to read the type of geometry (in the WKT representation of the geometry)
        and describe it with the appropriate class of the Simple Feature Ontology (http://www.opengis.net/ont/sf)."""@en ;
    sh:targetClass loac:InitialSearchArea ;
    sh:rule [
                a sh:SPARQLRule ;
                sh:construct """
		    prefix rdf:  <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
            prefix loac: <http://purl.org/loac#>
            prefix gviz: <http://lig-tdcge.imag.fr/steamer/covikoa/geoviz#>
            prefix geo: <http://www.opengis.net/ont/geosparql#>
            prefix geof: <http://www.opengis.net/def/function/geosparql/>

            CONSTRUCT {
                ?ft a loac:ReferenceObject ;
                    loac:hasCategory ?cat ;
                    loac:isContainedIn ?zir ;
                    geo:hasGeometry [ a ?geomType ; geo:asWKT ?geomFtWkt] .
                ?ft loac:osmName ?osmName .
            } WHERE {
                NOT EXISTS { ?ft loac:isContainedIn ?zir . }
                ?alerteOavm gviz:represents [
                    loac:hasInitialSearchArea ?zir ;
                ] .
                ?zir geo:hasGeometry [geo:asWKT ?geomZirWkt] .
                SERVICE <http://localhost:3330/ds> {
                    ?ft a loac:ReferenceObject ;
                        loac:hasCategory ?cat ;
                        geo:hasGeometry [geo:asWKT ?geomFtWkt] .
                    OPTIONAL { ?ft loac:osmName ?osmName . }
                }
                FILTER(geof:sfIntersects(?geomZirWkt, ?geomFtWkt)).
                BIND(
                    IF(CONTAINS(STR(?geomFtWkt), "MULTIPOINT"), IRI("http://www.opengis.net/ont/sf#MultiPoint"),
                    IF(CONTAINS(STR(?geomFtWkt), "POINT"), IRI("http://www.opengis.net/ont/sf#Point"),
                    IF(CONTAINS(STR(?geomFtWkt), "MULTILINESTRING"), IRI("http://www.opengis.net/ont/sf#MultiLineString"),
                    IF(CONTAINS(STR(?geomFtWkt), "LINESTRING"), IRI("http://www.opengis.net/ont/sf#LineString"),
                    IF(CONTAINS(STR(?geomFtWkt), "MULTIPOLYGON"), IRI("http://www.opengis.net/ont/sf#MultiPolygon"),
                    IF(CONTAINS(STR(?geomFtWkt), "POLYGON"), IRI("http://www.opengis.net/ont/sf#Polygon"),
                    IRI("http://www.opengis.net/ont/sf#Geometry")))))))
                AS ?geomType).
            }
    """ ;
            ] .

:LowZoomScale a scale:Scale ;
              scale:hasMinScaleDenominator "0.0"^^xsd:float ;
              scale:hasMaxScaleDenominator "13.0"^^xsd:float .

:HighZoomScale a scale:Scale ;
               scale:hasMinScaleDenominator "13.0"^^xsd:float ;
               scale:hasMaxScaleDenominator "19.0"^^xsd:float .