@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix geo: <http://www.opengis.net/ont/geosparql#> .
@prefix gviz: <http://lig-tdcge.imag.fr/steamer/covikoa/geoviz#> .
@prefix cvkr: <http://lig-tdcge.imag.fr/steamer/covikoa/derivation#> .
@prefix cdp: <http://lig-tdcge.imag.fr/steamer/covikoa/derivation-prefixes#> .
@prefix cvc: <http://lig-tdcge.imag.fr/steamer/covikoa/context#> .

# Here is a set of utility SPARQL functions used by CoViKoa rules.

cdp:
    a owl:Ontology ;
    owl:imports sh: ;
    sh:declare [
                   sh:prefix "gviz" ;
                   sh:namespace "http://lig-tdcge.imag.fr/steamer/covikoa/geoviz#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "owl" ;
                   sh:namespace "http://www.w3.org/2002/07/owl#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "cvkr" ;
                   sh:namespace "http://lig-tdcge.imag.fr/steamer/covikoa/derivation#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "prov" ;
                   sh:namespace "http://www.w3.org/ns/prov#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "time" ;
                   sh:namespace "http://www.w3.org/2006/time#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "geo" ;
                   sh:namespace "http://www.opengis.net/ont/geosparql#"^^xsd:anyURI ;
               ] ;
    sh:declare [
                   sh:prefix "rdfs" ;
                   sh:namespace "http://www.w3.org/2000/01/rdf-schema#"^^xsd:anyURI ;
               ] .

cvkr:GetCurrentGenerationNode
    a sh:SPARQLFunction ;
    rdfs:comment """Returns the generation node (prov:Generation) corresponding to the current reasoning pass."""@en ;
    sh:prefixes cdp: ;
    sh:select """
        SELECT ?lastGenNode
        WHERE {
            BIND(cvkr:Now() as ?dt) .
            ?lastGenNode a prov:Generation ;
                prov:atTime ?dt .
        }
    """ .

cvkr:Now
    a sh:SPARQLFunction ;
    rdfs:comment """
        A function returning the starting datetime of execution of the current reasoning process
        (it's different from using NOW() sparql function in that the datetime returned by this function
        will be the same each time it's called in the same reasoning step).
        For that we are puting a timestamp in our graph each time the reasoning process starts (and we remove it at the end),
        this function just read it."""@en ;
    sh:returnType xsd:dateTime ;
    sh:prefixes cdp: ;
    sh:select """
        SELECT ?timestampValue
        WHERE {
            ?timestamp a cvkr:RuleExecutionMarker ;
                time:inXSDDateTime ?timestampValue .
        }
        """ .

cvkr:UnPackGeomWKT
    a sh:SPARQLFunction ;
    rdfs:comment """
        Match the pattern allowing to retrieve the WKT geometry a geo:Feature.
        """@en ;
    sh:parameter [
                     sh:path cvkr:op1 ;
                     sh:datatype xsd:anyURI ;
                     sh:description "The URI of the Feature for which we want to extract the WKT geometry."@en ;
                 ] ;
    sh:returnType geo:wktLiteral ;
    sh:prefixes cdp: ;
    sh:select """
        SELECT ?geomZone
        WHERE {
            $op1 geo:hasGeometry [ geo:asWKT ?geomZone ] .
        }
    """ .

cvkr:UnPackGeomType
    a sh:SPARQLFunction ;
    rdfs:comment """
        Match the pattern allowing to retrieve the SF geometry type or returns sf:Geometry otherwise if the
        type isn't specified and can't be retrieved from the WKT representation.

        Used for matching a geometry specific type of symbolizer (PointSymbolizer, LineSymbolizer, PolygonSymbolizer).
        """@en ;
    sh:parameter [
                     sh:path cvkr:op1 ;
                     sh:datatype xsd:anyURI ;
                     sh:description "The URI of the Feature for which we want to know the SF geometry type."@en ;
                 ] ;
    sh:returnType xsd:anyURI ;
    sh:prefixes cdp: ;
    sh:select """
        SELECT ?geomType
        WHERE {
            OPTIONAL {
                $op1 geo:hasGeometry [geo:asWKT ?geomFtWkt ; a ?gtype ] .
                FILTER(CONTAINS(STR(?gtype), "http://www.opengis.net/ont/sf")) .
            } .
            BIND(IF(BOUND(?gtype), ?gtype,
                IF(CONTAINS(STR(?geomFtWkt), "MULTIPOINT"), IRI("http://www.opengis.net/ont/sf#MultiPoint"),
                IF(CONTAINS(STR(?geomFtWkt), "POINT"), IRI("http://www.opengis.net/ont/sf#Point"),
                IF(CONTAINS(STR(?geomFtWkt), "MULTILINESTRING"), IRI("http://www.opengis.net/ont/sf#MultiLineString"),
                IF(CONTAINS(STR(?geomFtWkt), "LINESTRING"), IRI("http://www.opengis.net/ont/sf#LineString"),
                IF(CONTAINS(STR(?geomFtWkt), "MULTIPOLYGON"), IRI("http://www.opengis.net/ont/sf#MultiPolygon"),
                IF(CONTAINS(STR(?geomFtWkt), "POLYGON"), IRI("http://www.opengis.net/ont/sf#Polygon"),
                IRI("http://www.opengis.net/ont/sf#Geometry"))))))))
            AS ?geomType).
        }
    """ .
